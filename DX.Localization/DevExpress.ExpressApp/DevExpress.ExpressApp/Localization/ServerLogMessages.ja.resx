<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationServerStartedRemoting" xml:space="preserve">
    <value>リモーティングを使ってアプリケーション サーバーを開始しました。</value>
  </data>
  <data name="ApplicationServerStartedWcf" xml:space="preserve">
    <value>WCF を使ってアプリケーション サーバーを開始しました。</value>
  </data>
  <data name="AppServerStopped" xml:space="preserve">
    <value>アプリケーション サーバーが停止しました。</value>
  </data>
  <data name="CannotFindMethod" xml:space="preserve">
    <value>サーバー上で関数を実行する際に、メソッド {0}.{1} が見つかりません。</value>
  </data>
  <data name="CannotFindType" xml:space="preserve">
    <value>タイプ {0} が見つかりません。</value>
  </data>
  <data name="ClientInfoTemplate" xml:space="preserve">
    <value>クライアント情報: Id={0}; {1}</value>
  </data>
  <data name="Dictionary" xml:space="preserve">
    <value>辞書:</value>
  </data>
  <data name="EmailBodyTemplate" xml:space="preserve">
    <value>カテゴリ: {0}\r\nコード: {1}\r\nテキスト: {2}.</value>
  </data>
  <data name="FunctionExecutionFinished" xml:space="preserve">
    <value>関数 {0} の実行が正常に完了しました。</value>
  </data>
  <data name="FunctionExecutionStarted" xml:space="preserve">
    <value>関数 {0} の実行を開始しました。</value>
  </data>
  <data name="FunctionIncorrectSyntax" xml:space="preserve">
    <value>正しくない構文を持つ関数の呼び出しを実行しようとしています。\r\nコマンド: {0}.</value>
  </data>
  <data name="GetModuleEmptyResult" xml:space="preserve">
    <value>モージュール情報（moduleName は '{0}'）のための CheckCompatibilityService への呼び出し。応答は空白です。</value>
  </data>
  <data name="GetModulesEmptyResult" xml:space="preserve">
    <value>モジュール リストのための CheckCompatibilityService への呼び出し。応答は空白です。</value>
  </data>
  <data name="GetModulesSuccess" xml:space="preserve">
    <value>モジュール リストのための CheckCompatibilityService への呼び出し。モジュールを正常に取得できました。</value>
  </data>
  <data name="GetModuleSuccess" xml:space="preserve">
    <value>モジュール情報（moduleName は '{0}'） のための CheckCompatibilityService への呼び出し。応答: {1}.</value>
  </data>
  <data name="InvalidArgumentsList" xml:space="preserve">
    <value>関数の引数リストが正しくありません: {0}.{1} 次のパラメーターが見つかりません:</value>
  </data>
  <data name="ModuleInfoText" xml:space="preserve">
    <value>モジュール情報:\r\n 名前: {0};\r\nバージョン: {1};\r\nIsMain: {2};\r\nアセンブリ ファイル名: {3};</value>
  </data>
  <data name="Object" xml:space="preserve">
    <value>オブジェクト:</value>
  </data>
  <data name="Objects" xml:space="preserve">
    <value>オブジェクト:</value>
  </data>
  <data name="ObjectsForDelete" xml:space="preserve">
    <value>削除するオブジェクト:</value>
  </data>
  <data name="ObjectsForSave" xml:space="preserve">
    <value>保存するオブジェクト:</value>
  </data>
  <data name="ObjectTypes" xml:space="preserve">
    <value>オブジェクト タイプ:</value>
  </data>
  <data name="OperationCompleted" xml:space="preserve">
    <value>操作 {0} が正常に完了しました。</value>
  </data>
  <data name="OperationFailed" xml:space="preserve">
    <value>操作 {0} が失敗しました。\r\n{1}
{1}</value>
  </data>
  <data name="OperationRequest" xml:space="preserve">
    <value>操作 {0} 呼び出しを受信しました。</value>
  </data>
  <data name="OperationResultTemplate" xml:space="preserve">
    <value>操作の結果: {0}</value>
  </data>
  <data name="OwnerObject" xml:space="preserve">
    <value>Owner オブジェクト:</value>
  </data>
  <data name="Properties" xml:space="preserve">
    <value>プロパティ:</value>
  </data>
  <data name="Property" xml:space="preserve">
    <value>プロパティ:</value>
  </data>
  <data name="RefPropertyName" xml:space="preserve">
    <value>RefPropertyName:</value>
  </data>
  <data name="SchemeIsNotSupported" xml:space="preserve">
    <value>スキーム '{0}' の接続文字列はサポートされていません。</value>
  </data>
  <data name="StartingAppServer" xml:space="preserve">
    <value>アプリケーション サーバーを開始しています。</value>
  </data>
</root>