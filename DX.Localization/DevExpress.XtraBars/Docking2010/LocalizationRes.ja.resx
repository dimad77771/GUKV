<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DocumentManagerStringId.CommandTileHorizontal" xml:space="preserve">
    <value>ウィンドウを上下に並べて表示</value>
  </data>
  <data name="DocumentManagerStringId.CommandNewHorizontalDocumentGroup" xml:space="preserve">
    <value>新規横タブ クループ</value>
  </data>
  <data name="DocumentManagerStringId.CommandNewDocumentGroup" xml:space="preserve">
    <value>新規タブ グループ</value>
  </data>
  <data name="DocumentManagerStringId.CommandRestoreAll" xml:space="preserve">
    <value>ウィンドウを復元</value>
  </data>
  <data name="DocumentManagerStringId.CommandMoveToNextDocumentGroup" xml:space="preserve">
    <value>次のタブ グループに移動</value>
  </data>
  <data name="DocumentManagerStringId.CommandMoveToPrevDocumentGroup" xml:space="preserve">
    <value>前のタブ グループに移動</value>
  </data>
  <data name="DocumentManagerStringId.CommandNewVerticalDocumentGroup" xml:space="preserve">
    <value>新規縦タブ グループ</value>
  </data>
  <data name="DocumentManagerStringId.CommandActivate" xml:space="preserve">
    <value>有効</value>
  </data>
  <data name="DocumentManagerStringId.CommandArrangeIcons" xml:space="preserve">
    <value>アイコンを配列</value>
  </data>
  <data name="DocumentManagerStringId.CommandCascade" xml:space="preserve">
    <value>カスケード ウィンドウ</value>
  </data>
  <data name="DocumentManagerStringId.CommandClose" xml:space="preserve">
    <value>閉じる</value>
  </data>
  <data name="DocumentManagerStringId.CommandCloseAllButThis" xml:space="preserve">
    <value>これ以外を閉じる</value>
  </data>
  <data name="DocumentManagerStringId.CommandDock" xml:space="preserve">
    <value>タブ付きドキュメントとしてドッキング</value>
  </data>
  <data name="DocumentManagerStringId.CommandHorizontalOrientation" xml:space="preserve">
    <value>横</value>
  </data>
  <data name="DocumentManagerStringId.CommandMinimizeAll" xml:space="preserve">
    <value>ウィンドウを最小化</value>
  </data>
  <data name="DocumentManagerStringId.CommandTileVertical" xml:space="preserve">
    <value>ウィンドウをサイド バイ サイドで表示</value>
  </data>
  <data name="DocumentManagerStringId.CommandVerticalOrientation" xml:space="preserve">
    <value>縦</value>
  </data>
  <data name="DocumentManagerStringId.CommandFloat" xml:space="preserve">
    <value>フロート</value>
  </data>
  <data name="DocumentManagerStringId.CommandBack" xml:space="preserve">
    <value>背面</value>
  </data>
  <data name="DocumentManagerStringId.CommandRestore" xml:space="preserve">
    <value>復元</value>
  </data>
  <data name="DocumentManagerStringId.CommandMaximize" xml:space="preserve">
    <value>最大化</value>
  </data>
  <data name="DocumentManagerStringId.CommandCloseAll" xml:space="preserve">
    <value>すべてのドキュメントを閉じる</value>
  </data>
  <data name="DocumentManagerStringId.CommandResetLayout" xml:space="preserve">
    <value>ウィンドウ レイアウトのリセット</value>
  </data>
  <data name="DocumentManagerStringId.CommandRotate" xml:space="preserve">
    <value>回転</value>
  </data>
  <data name="DocumentManagerStringId.CommandFlip" xml:space="preserve">
    <value>反転</value>
  </data>
  <data name="DocumentManagerStringId.CommandRotateDescription" xml:space="preserve">
    <value>レイアウトを回転</value>
  </data>
  <data name="DocumentManagerStringId.CommandFlipDescription" xml:space="preserve">
    <value>ドキュメントを反転</value>
  </data>
  <data name="DocumentManagerStringId.CommandHome" xml:space="preserve">
    <value>ホーム</value>
  </data>
  <data name="DocumentManagerStringId.CommandBackDescription" xml:space="preserve">
    <value>前にナビゲート</value>
  </data>
  <data name="DocumentManagerStringId.CommandHomeDescription" xml:space="preserve">
    <value>ホーム画面へナビゲート</value>
  </data>
  <data name="DocumentManagerStringId.CommandDetail" xml:space="preserve">
    <value>詳細</value>
  </data>
  <data name="DocumentManagerStringId.CommandDetailDescription" xml:space="preserve">
    <value>このドキュメントにナビゲート</value>
  </data>
  <data name="DocumentManagerStringId.CommandOverview" xml:space="preserve">
    <value>概要</value>
  </data>
  <data name="DocumentManagerStringId.CommandExit" xml:space="preserve">
    <value>終了</value>
  </data>
  <data name="DocumentManagerStringId.CommandExitDescription" xml:space="preserve">
    <value>アプリケーションを終了</value>
  </data>
  <data name="DocumentManagerStringId.CommandOverviewDescription" xml:space="preserve">
    <value>ドキュメントをリストとして表示</value>
  </data>
  <data name="DocumentManagerStringId.CommandEnableFullScreenMode" xml:space="preserve">
    <value>全画面表示</value>
  </data>
  <data name="DocumentManagerStringId.CommandEnableFullScreenModeDescription" xml:space="preserve">
    <value>全画面表示に切り替え</value>
  </data>
  <data name="DocumentManagerStringId.CommandDisableFullScreenMode" xml:space="preserve">
    <value>全画面表示を無効</value>
  </data>
  <data name="DocumentManagerStringId.CommandDisableFullScreenModeDescription" xml:space="preserve">
    <value>標準ビューに切り替え</value>
  </data>
  <data name="DocumentManagerStringId.CommandOpenedWindowsDialog" xml:space="preserve">
    <value>ウィンドウ...</value>
  </data>
  <data name="DocumentManagerStringId.OpenedWindowsDialogNameColumnCaption" xml:space="preserve">
    <value>名前</value>
  </data>
  <data name="DocumentManagerStringId.OpenedWindowsDialogPathColumnCaption" xml:space="preserve">
    <value>パス</value>
  </data>
  <data name="DocumentManagerStringId.DeferredLoadingExceptionMessage" xml:space="preserve">
    <value>遅延コンテンツの読み込みを実行できませんでした。コンテンツを提供するには、ビューの QueryControl イベントにサブスクライブしてください。</value>
  </data>
  <data name="DocumentManagerStringId.NonDocumentModeInitializationExceptionMessage" xml:space="preserve">
    <value>ドキュメント以外のモードの初期化を実行できませんでした。このモードを有効にするには、DocumentManager の ClientControl プロパティを指定してください。</value>
  </data>
  <data name="DocumentManagerStringId.NullParentContainerExceptionMessage" xml:space="preserve">
    <value>DocumentManager には親コンテナを含む必要があります。MdiParent、ClientControl または ContainerControl のいずれかのプロパティが設定されているかを確認してください。</value>
  </data>
  <data name="DocumentManagerStringId.LoadingIndicatorCaption" xml:space="preserve">
    <value>お待ちください</value>
  </data>
  <data name="DocumentManagerStringId.LoadingIndicatorDescription" xml:space="preserve">
    <value>読み込み中...</value>
  </data>
  <data name="DocumentManagerStringId.SplashScreenCaption" xml:space="preserve">
    <value>読み込み中...</value>
  </data>
</root>