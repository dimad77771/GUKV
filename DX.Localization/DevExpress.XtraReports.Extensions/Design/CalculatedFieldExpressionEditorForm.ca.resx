<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Cancel·lar</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Editor d'Expressions</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Constants</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Camps</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funcions</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Paràmetres</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operadors</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Elimina totes les aparicions d'un conjunt de caràcters especificats al principi i al final d'una instància.</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Retorna un enter que indica el nombre de caràcters en un text o el nombre de bytes necessaris per guardar la variable.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring (", StartPosition, Count) Torna una part de la cadena inicial, començant en la posició StartPosition fins al nombre de caràcters indicat a Count.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>IIF (Expression, TruePart, FalsePart) Retorna un dels dos objectes, depenent de l'avaluació de l'expressió. Paràmetres: Expression - Lògica. L'expressió que voleu avaluar. TruePart - L'objecte retornat si l'expressió s'avalua a veritable. FalsePart - L'objecte retornat si l'expressió s'avalua a fals.</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>Determina si el valor d'un camp és NUL.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Retorna el caràcter especificat en l'expressió en majúscules.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Retorna el caràcter especificat en l'expressió en minúscules.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Retorna el text que resulta de la concatenació del text actual amb qualsevol altre text. Arguments: text1, ..., Textones. Textos opcionals a concatenar al final del text actual.</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>El tipus d'aquest camp és:</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>El tipus de paràmetres és:</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Afegeix el valor d'una expressió numèrica a una altra o bé concatena dos textos.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Torna la diferència entre dos nombres.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Efectua una multiplicació entre dos valors numèrics.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Provoca una divisió del primer operador pel segon.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Retorna el residu (mòdul) obtingut dividint el primer operand pel segon.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Compara cada bit del primer operand amb el corresponent del segon. Si algun dels dos valen un, el corresponent del resultat també val un. En qualsevol altre cas val zero.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Efectua una operació 'I' lògica entre dos valors enters.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Fa l'exclusió lògica (XOR) en dos valors lògics o l'exclusió lògica a bit de dos nombres.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Retorna Veritable si els dos operands tenen el mateix valor, sinó Fals.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Retorna Veritable si els dos operands no són iguals, sinó retorna Fals.</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Operador menor que. Usat per comparar expressions.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Operador menor o igual que. Usat per comparar expressions.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Operador més gran o igual que. Usat per comparar expressions.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Operador més gran que. Usat per comparar expressions.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>Comprova l'existència d'una propietat en un objecte.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Compara un text amb un patró. Si el valor del text satisfà el patró, el resultat és cert. Si text i patró són de longitud zero el resultat també és cert.</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Compara una expressió amb un rang. Retorna cert si el valor de l'expressió està entre el valor mínim i el màxim, ambdós inclosos.</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Efectua una conjunció lògica entre dues expressions.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Efectua una disjunció entre dos valors lògics.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Efectua una negació lògica sobre una expressió.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Representa el valor lògic cert.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Representa el valor lògic fals.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Representa el valor nul.</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring (", StartPosition) Torna una part de la cadena inicial, començant en la posició StartPosition fins al final de la cadena.</value>
  </data>
</root>